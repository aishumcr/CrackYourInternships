Partitions With Given Difference

find 2 subsets such that s1-s2=d;

//MEMOIZATION APPROACH.

import java.util.* ;
import java.io.*; 
public class Solution {
	static int mod=(int) 1000000007;
	public static int recur(int ind,int tar,int[] arr,int[][] dp){
		
		if(ind==0){
			if(arr[0]==0 && tar==0) return 2;
			if(tar==0 || arr[0]==tar) return 1;
			return 0;
		}
		if(dp[ind][tar]!=-1) return dp[ind][tar];
		int notTake=recur(ind-1,tar,arr,dp);
		int take=0;
		if(arr[ind]<=tar) take=recur(ind-1,tar-arr[ind],arr,dp);
		return dp[ind][tar]=(take+notTake)%mod;
	}
	public static int countPartitions(int n, int d, int[] arr) {
		// Write your code here.
		
		int sumv=0;
		for(int i:arr){
			sumv+=i;
		}
		if(sumv-d<0 || (sumv-d)%2==1) return 0;
		int tar=(sumv-d)/2;
		int[][] dp=new int[n][tar+1];
		for(int row[]:dp){
			Arrays.fill(row,-1);
		}
		return recur(n-1,tar,arr,dp);
	}
}


//DP SOLUTION ..


import java.util.* ;
import java.io.*; 
public class Solution {
	public static int countPartitions(int n, int d, int[] arr) {
	
		int sumv=0;
		for(int i:arr){
			sumv+=i;
		}

		if(sumv-d<0 || (sumv-d)%2==1) return 0;

		int tar=(sumv-d)/2;

		int[][] dp=new int[n][tar+1];
		
		//base cases 
		if(arr[0]==0) dp[0][0]=2;
		else dp[0][0]=1;


		//num[0]==0 then it becomes dp[0][0] so if arr[0]!=0 is imp.
		if(arr[0]!=0 && arr[0]<=tar) dp[0][arr[0]]=1;


		for (int ind = 1; ind < n; ind++) {
            for (int target = 0; target <= tar; target++) {
                // Calculate the number of ways when the current element is not taken
                int notTaken = dp[ind - 1][target];

                // Calculate the number of ways when the current element is taken
                int taken = 0;
                if (arr[ind] <= target) {
                    taken = dp[ind - 1][target - arr[ind]];
                }

                // Update the DP array for the current element and target sum
                dp[ind][target] = (notTaken + taken) %1000000007;
            }
        }

        // The result is stored in the last cell of the DP array
        return dp[n - 1][tar];
    }
	
}

//SPACE OPTIMIZATION...


import java.util.* ;
import java.io.*; 
public class Solution {
	public static int countPartitions(int n, int d, int[] arr) {
	
		int sumv=0;
		for(int i:arr){
			sumv+=i;
		}

		if(sumv-d<0 || (sumv-d)%2==1) return 0;

		int tar=(sumv-d)/2;

		int[] prev=new int [tar+1];

		//base cases 
		if(arr[0]==0) prev[0]=2;
		else prev[0]=1;


		//num[0]==0 then it becomes dp[0][0] so if arr[0]!=0 is imp.
		if(arr[0]!=0 && arr[0]<=tar) prev[arr[0]]=1;


		for (int ind = 1; ind < n; ind++) {
				int[] curr=new int [tar+1];
            for (int target = 0; target <= tar; target++) {
                // Calculate the number of ways when the current element is not taken
                int notTaken = prev[target];

                // Calculate the number of ways when the current element is taken
                int taken = 0;
                if (arr[ind] <= target) {
                    taken = prev[target - arr[ind]];
                }

                // Update the DP array for the current element and target sum
                curr[target] = (notTaken + taken) %1000000007;
            }
			prev=curr;
        }

        // The result is stored in the last cell of the DP array
        return prev[tar];
    }
	
}













