/**  A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time. 

 
Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2. **/


class Solution {
   
    public int findPeakElement(int[] nums) {
         int start = 0, end = nums.length-1;
        if(start==end)                    return start;
        if(nums[start]>nums[start+1])     return start;
        if(nums[end]>nums[end-1])         return end;
        start++;end--;
        while(start<=end){
            int mid = (end+start)/2;
            if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1])
                return mid;
            else if(nums[mid-1]>nums[mid])
                end = mid-1;
            else if(nums[mid+1]>nums[mid])
                start = mid+1;
        }
        return -1;
    
    }
}


solution 2: 
  class Solution {
   
    public int findPeakElement(int[] nums) {
        if(nums.length==1){
            return 0;
        }
        else if(nums.length==2){
            if(nums[0]<nums[1]) return 1;
            else return 0;
        }
        for(int i=1;i<=nums.length-1;i++){
            if(i==nums.length-1 && nums[i]>nums[i-1]) return i; 
            if(nums[i]>nums[i-1] && nums[i]>nums[i+1]) return i;   
        }

        return 0;
    }
}
