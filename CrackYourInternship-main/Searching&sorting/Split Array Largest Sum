Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.


class Solution {
    public static boolean ispossible(int[] nums,int mid,int k){
        int slots=1;
        int v=0;
        for(int i=0;i<nums.length;i++){
            if(v+nums[i]<=mid) v+=nums[i];
            else{
                slots+=1;
                v=nums[i];
            }
        }
        return slots<=k;
    }
    public int splitArray(int[] nums, int k) {
        int maxv=0;
        int ts=0;
        for(int i=0;i<nums.length;i++){
            ts+=nums[i];
            maxv=Math.max(maxv,nums[i]);
        }
        int low=maxv,high=ts;
        int ans=Integer.MAX_VALUE;
        while(low<=high){
            int mid=(low+high)/2;
            if(ispossible(nums,mid,k)){
                ans=Math.min(ans,mid);
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return ans;
    }
}
