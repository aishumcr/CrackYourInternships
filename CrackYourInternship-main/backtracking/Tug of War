Given a set of n integers, divide the set in two subsets of n/2 sizes each such that the absolute difference of the sum of two subsets
is as minimum as possible. If n is even, then sizes of two subsets must be strictly n/2 and if n is odd, then size of one subset 
must be (n-1)/2 and size of other subset must be (n+1)/2.
For example, let given set be {3, 4, 5, -3, 100, 1, 89, 54, 23, 20}, the size of set is 10. Output for this set should be
{4, 100, 1, 23, 20} and {3, 5, -3, 89, 54}. Both output subsets are of size 5 and sum of elements in both subsets is same (148 and 148). 
Let us consider another example where n is odd. Let given set be {23, 45, -34, 12, 0, 98, -99, 4, 189, -1, 4}.
The output subsets should be {45, -34, 12, 98, -1} and {23, 0, -99, 4, 189, 4}. The sums of elements in two subsets are 120 and 121 respectively.


import java.util.*;

class TugOfWar {
    public int min_diff;

    void TOWUtil(int arr[], int n, boolean curr_elements[], int no_of_selected_elements, boolean soln[], int sum, int curr_sum, int curr_position) {
        if (curr_position == n)
            return;

        if ((n / 2 - no_of_selected_elements) > (n - curr_position))
            return;

        TOWUtil(arr, n, curr_elements, no_of_selected_elements, soln, sum, curr_sum, curr_position + 1);

        no_of_selected_elements++;
        curr_sum = curr_sum + arr[curr_position];
        curr_elements[curr_position] = true;

        if (no_of_selected_elements == n / 2) {
            if (Math.abs(sum / 2 - curr_sum) < min_diff) {
                min_diff = Math.abs(sum / 2 - curr_sum);
                for (int i = 0; i < n; i++)
                    soln[i] = curr_elements[i];
            }
        } else {
            TOWUtil(arr, n, curr_elements, no_of_selected_elements, soln, sum, curr_sum, curr_position + 1);
        }

        curr_elements[curr_position] = false;
    }

    void tugOfWar(int arr[]) {
        int n = arr.length;
        boolean[] curr_elements = new boolean[n];
        boolean[] soln = new boolean[n];
        min_diff = Integer.MAX_VALUE;
        int sum = 0;

        for (int i = 0; i < n; i++) {
            sum += arr[i];
            curr_elements[i] = soln[i] = false;
        }

        TOWUtil(arr, n, curr_elements, 0, soln, sum, 0, 0);

        System.out.print("The first subset is: ");
        for (int i = 0; i < n; i++) {
            if (soln[i] == true)
                System.out.print(arr[i] + " ");
        }
        System.out.print("\nThe second subset is: ");
        for (int i = 0; i < n; i++) {
            if (soln[i] == false)
                System.out.print(arr[i] + " ");
        }
    }

    public static void main(String[] args) {
        int arr[] = {23, 45, -34, 12, 0, 98, -99, 4, 189, -1, 4};
        TugOfWar a = new TugOfWar();
        a.tugOfWar(arr);
    }
}





import java.util.*;

public class Main {
    static int mind=Integer.MAX_VALUE;
    public static void solve(int ind, int[] arr, List<Integer> ds, int n, List<List<Integer>> ans,int ts,int size,int sum,int sel,int curr) {
        
        if(ind>=n) return ;
        if(size-sel > (size*2)-curr) return ;
        
        if(ds.size()==size){
            int ls=ts-sum;
            mind=Math.min(mind,Math.abs(sum-ls));
            ans.add(new ArrayList<>(ds));
            return;
        }
        
             // Add this line to terminate further recursion
       

        ds.add(arr[ind]);
        sel++;
        solve(ind + 1, arr, ds, n, ans,ts,size,sum+arr[ind],sel,curr++);
        ds.remove(ds.size() - 1);
        solve(ind + 1, arr, ds, n, ans,ts,size,sum,sel,curr++);
    }

    public static void main(String[] args) {
        int[] arr = {3, 4, 5, -3, 100, 1, 89, 54, 23, 20};
        int ts=0;
        for(int i:arr){
            ts+=i;
        }
        List<List<Integer>> ans = new ArrayList<>();
        solve(0, arr, new ArrayList<>(), 10, ans,ts,(int)arr.length/2,0,0,0);
        System.out.println(ans);
        System.out.println(mind);
    }
}



