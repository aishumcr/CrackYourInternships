Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.

Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.

 

Example 1:

Input: s = "()())()"
Output: ["(())()","()()()"]
Example 2:

Input: s = "(a)())()"
Output: ["(a())()","(a)()()"]
Example 3:

Input: s = ")("


class Solution{
public List<String> removeInvalidParentheses(String s) {
    int rmL = 0, rmR = 0;
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) == '(') {
            rmL++;
        } else if (s.charAt(i) == ')') {
            if (rmL != 0) {
                rmL--;
            } else {
                rmR++;
            }
        }
    }
    Set<String> res = new HashSet<>();
    dfs(s, 0, res, new StringBuilder(), rmL, rmR, 0);
    return new ArrayList<String>(res);
}

public void dfs(String s, int i, Set<String> res, StringBuilder sb, int rmL, int rmR, int open) {
    if (rmL < 0 || rmR < 0 || open < 0) {
        return;
    }
    if (i == s.length()) {
        if (rmL == 0 && rmR == 0 && open == 0) {
            res.add(sb.toString());
        }        
        return;
    }

    char c = s.charAt(i); 
    int len = sb.length();

    if (c == '(') {
        System.out.println(sb);
        dfs(s, i + 1, res, sb, rmL - 1, rmR, open);		    
       
    	dfs(s, i + 1, res, sb.append(c), rmL, rmR, open + 1);     
          System.out.println(sb);  

    } else if (c == ')') {
        System.out.println(sb);
        dfs(s, i + 1, res, sb, rmL, rmR - 1, open);

    	dfs(s, i + 1, res, sb.append(c), rmL, rmR, open - 1);
        System.out.println(sb);  
        
    } else {
        dfs(s, i + 1, res, sb.append(c), rmL, rmR, open);	
    }

    sb.setLength(len);        
}
}
