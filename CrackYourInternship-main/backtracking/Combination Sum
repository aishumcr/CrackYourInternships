Given an array of integers and a sum B, find all unique combinations in the array where the sum is equal to B. The same number may be chosen from the array any number of times to make B.

Note:
        1. All numbers will be positive integers.
        2. Elements in a combination (a1, a2, …, ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
        3. The combinations themselves must be sorted in ascending order.


Example 1:

Input:
N = 4
arr[] = {7,2,6,5}
B = 16
Output:
(2 2 2 2 2 2 2 2)
(2 2 2 2 2 6)
(2 2 2 5 5)
(2 2 5 7)
(2 2 6 6)
(2 7 7)
(5 5 6)
Example 2:

Input:
N = 11
arr[] = {6,5,7,1,8,2,9,9,7,7,9}
B = 6
Output:
(1 1 1 1 1 1)
(1 1 1 1 2)
(1 1 2 2)
(1 5)
(2 2 2)
(6)



class Solution
{
    public static void solve(int ind,ArrayList<Integer> A,ArrayList<Integer> ds,int sum,ArrayList<ArrayList<Integer>>ans){
        
        if(sum==0){
            ans.add(new ArrayList<>(ds));
            return ;
        }
            
        for (int i = ind; i < A.size(); i++) {
            if (i > ind && A.get(i).equals(A.get(i - 1)))
                continue;
            if (A.get(i) > sum)
                break;
            ds.add(A.get(i));
            solve(i, A, ds, sum - A.get(i), ans); // Allow the same number to be used multiple times, hence i remains same
            ds.remove(ds.size() - 1);
        }
    }
    static ArrayList<ArrayList<Integer>> combinationSum(ArrayList<Integer> A, int B)
    {
        ArrayList<ArrayList<Integer>>ans=new ArrayList<>();
       //HashSet<ArrayList<Integer>>ans=new LinkedHashSet<>();
       Collections.sort(A);
       solve(0,A,new ArrayList<>(),B,ans);
       //ArrayList<ArrayList<Integer>>res=new ArrayList<>(ans);
       return ans;
    }
}

