Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {


    public int Height(ListNode head){
        ListNode tmp;
        tmp=head;
        int c=0;
        if(head.next==null) return 1;
        while(tmp!=null){
            c+=1;
            tmp=tmp.next;
        }
        return c;
    }
    public ListNode middleNode(ListNode head) {
        ListNode tmp;
        tmp=head;
        int height=Height(head);
        int v=height/2;
        if(height%2==0){
            while(tmp!=null){
                if(height!=v){
                    height--;
                    tmp=tmp.next;
                    

                }
                else return tmp;
            }
        }
        else{
            while(tmp!=null){
                if(height!=v+1){
                    height--;
                    tmp=tmp.next;
                }
                else return tmp;
            }
        }
     return null;
    }
}
