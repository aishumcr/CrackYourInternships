Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.

SOLUTION :: Here we use 2 pointer and sliding window with hashmaps.
first pattern is storedin hashmap .after for each character in string we store that ih hm and check for count in pattern if its is less than or equal to
pattern length we update count. 

After we found pattern we start j from start and remove characters from start which doesnot impact on length.
        



       String ans="";
        HashMap<Character,Integer> map2=new HashMap<>();
        for(int i=0;i<p.length();i++){
            char ch=p.charAt(i);
            map2.put(ch,map2.getOrDefault(ch,0)+1);
        }
        int mt=0;
        int dcnt=p.length();
        HashMap<Character,Integer> map1=new HashMap<>();
        int i=-1,j=-1;
        while(true){
            boolean f1=false,f2=false;
            while(i<s.length()-1 && mt<dcnt){
                i++;
                char ch=s.charAt(i);
                map1.put(ch,map1.getOrDefault(ch,0)+1);
                if(map1.getOrDefault(ch,0)<=map2.getOrDefault(ch,0)){
                    mt++;
                }
                f1=true;
            }
            
            while(j<i && mt==dcnt){
                String pans=s.substring(j+1,i+1);
                if(ans.length()==0||pans.length()<ans.length()){
                    ans=pans;
                }
                j++;
                char ch=s.charAt(j);
                if(map1.get(ch)==1){
                    map1.remove(ch);
                }
                else{
                    map1.put(ch,map1.get(ch)-1);
                }
                if(map1.getOrDefault(ch,0)<map2.getOrDefault(ch,0)){
                    mt--;
                }
                f2=true;
            }
             if(f1==false && f2==false) break;
        }
        return and;






GFG SOLUTION::
class Solution
{
    static final int no_of_chars = 256;
    //Function to find the smallest window in the string s consisting
    //of all the characters of string p.
    public static String smallestWindow(String s, String p)
    {int len1 = s.length();
        int len2 = p.length();
 
        // Check if string's length is
        // less than pattern's
        // length. If yes then no such
        // window can exist
        if (len1 < len2) {
            return "-1";
        }
 
        int hash_pat[] = new int[no_of_chars];
        int hash_str[] = new int[no_of_chars];
 
        // Store occurrence ofs
        // characters of pattern
        for (int i = 0; i < len2; i++)
            hash_pat[p.charAt(i)]++;
 
        int start = 0, start_index = -1,
            min_len = Integer.MAX_VALUE;
 
        // Start traversing the string
        // Count of characters
        int count = 0;
        for (int j = 0; j < len1; j++) {
           
            // Count occurrence of characters
            // of string
            hash_str[s.charAt(j)]++;
 
            // If string's char matches
            // with pattern's char
            // then increment count
            if (hash_str[s.charAt(j)]
                <= hash_pat[s.charAt(j)])
                count++;
 
            // If all the characters are matched
            if (count == len2) {
               
                // Try to minimize the window
                while (hash_str[s.charAt(start)]
                           > hash_pat[s.charAt(start)]
                       || hash_pat[s.charAt(start)]
                              == 0) {
 
                    if (hash_str[s.charAt(start)]
                        > hash_pat[s.charAt(start)])
                        hash_str[s.charAt(start)]--;
                    start++;
                }
 
                // update window size
                int len_window = j - start + 1;
                if (min_len > len_window) {
                    min_len = len_window;
                    start_index = start;
                }
            }
        }
 
        // If no window found
        if (start_index == -1) {
           
            return "-1";
        }
 
        // Return substring starting
        // from start_index
        // and length min_len
        return s.substring(start_index,
                             start_index + min_len);
    
 
        // Your code here
    }
}
