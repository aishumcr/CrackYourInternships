Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.


Solution:: Generating all substrings and frequencies.check which frequency is equal to n.of elements then getting length of string and finding all
strings which have fequency==length and length of string > previous ans.


class Solution {
    public String longestCommonPrefix(String[] strs) {
        HashMap<String,Integer> hm=new HashMap<>();
        int n=strs.length;
        for(String x:strs){
            String s="";
            for(int j=0;j<x.length();j++){
                s+=x.charAt(j);
                 if(hm.containsKey(s)){
                hm.put(s,hm.get(s)+1);
            }
            else{
                hm.put(s,1);
            }
            }
           
        }
        System.out.println(hm);
        String ans="";
        for(String x:hm.keySet()){
            if(hm.get(x)==n && x.length()>ans.length()){
                ans=x.substring(0,x.length());
            }

        }
        return ans;
    }
}



Solution2 ::: EFFICIENT

sort the array in lexiographical order and find first and last string longest common prefix. 



   class Solution {
    public String longestCommonPrefix(String[] strs) {
        Arrays.sort(strs);
        String s1 = strs[0];
        String s2 = strs[strs.length-1];
        int idx = 0;
        while(idx < s1.length() && idx < s2.length()){
            if(s1.charAt(idx) == s2.charAt(idx)){
                idx++;
            } else {
                break;
            }
        }
        return s1.substring(0, idx);
    }
}
