/**You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.



Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.**/


Solution : We need to reach till end. So we use greedy approach to reach efficiently and fastly.
// Idea is to move index+value so u can know the position u reach max at each index. so if we reach >=last we can if not we cannot reach till end.

class Solution {
    public boolean canJump(int[] nums) {
        int last=nums.length-1;
        int maxReach=0;
        for(int i=0;i<=maxReach;i++){
            maxReach=Math.max(maxReach,i+nums[i]);
            if(maxReach>=last) return true;
        }
        return false;
    }
 





