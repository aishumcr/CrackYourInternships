// we use 4 sum  to solve using 3sum approach.
//o(n3)

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
         Set<List<Integer>> ans=new HashSet<>();
        for(int i = 0; i < nums.length-3; i++){
            for(int j=i+1;j<nums.length-2;j++){
            int p1 = j+1;
            int p2 = nums.length-1;
            while(p1 < p2){
                long sum = (long)nums[i]+ (long)nums[p1]+(long)nums[p2]+(long)nums[j];
                if(sum == (long)target){
                    ArrayList<Integer> sp = new ArrayList<>();
                    sp.add(nums[i]);
                    sp.add(nums[p1]);
                    sp.add(nums[p2]);
                     sp.add(nums[j]);
                    
                    ans.add(sp);
                    p1++;
                    p2--;
                }
                else if(sum < target){
                    p1++;
                }
                else{
                    p2--;
                }
            }
        
            }
        }
        return new ArrayList<>(ans);
    }
}
