// Array should not be modified and 1 extra space should only be used.
//o(n),o(n)
class Solution {
    public int findDuplicate(int[] nums) {
        int n=Arrays.stream(nums).max().getAsInt();
        int[] arr=new int[n+1];
        arr[0]=0;
        int i;
        for(i=0;i<nums.length;i++){
            if(arr[nums[i]]!=0){
                break;
            }
            else{
                arr[nums[i]]=1;
            }
        }
        return nums[i];
    }
}

// 2. -ve of numbers method .
//o(n),o(1)

class Solution {
    public int findDuplicate(int[] nums) {
       int len = nums.length;
        for (int num : nums) {
            int idx = Math.abs(num);
            if (nums[idx] < 0) {
                return idx;
            }
            nums[idx] = -nums[idx];
        }

        return len;
}
}
