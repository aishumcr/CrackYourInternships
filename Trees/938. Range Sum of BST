Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].


class Solution {
    int sum=0;
    public int rangeSumBST(TreeNode root, int low, int high) {
        if(root==null) return 0;
        if(root.val>=low && root.val<=high) sum+=root.val;
        rangeSumBST(root.left,low,high);
        rangeSumBST(root.right,low,high);
        return sum;

    }
}


class Solution {
public:
int sum = 0; // Initialised Sum
    void Traversal(TreeNode* root,int low,int high)
    {
        if(root==NULL) // If Node is NULL then we return 
        return;
        Traversal(root->left,low,high); // To check for left Node
        if(root->val <= high && root->val >=low)sum+=root->val;// If value of node is in range then add to sum.
        Traversal(root->right,low,high); // To check for right Node
    }
    int rangeSumBST(TreeNode* root, int low, int high) {
        ios_base::sync_with_stdio(false);
        cin.tie(nullptr);
        cout.tie(nullptr); // To make input output fast
        Traversal(root,low,high); //To Traverse in BST
        return sum;
    }
};
