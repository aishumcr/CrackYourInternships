class Solution {
    private boolean isIdentical(TreeNode root,TreeNode subRoot){
        if(root==null&&subRoot==null) return true;
        if(root==null || subRoot==null) return false;
        if(root.val!=subRoot.val) return false; 
        return isIdentical(root.left,subRoot.left) && isIdentical(root.right,subRoot.right);
    }
     public boolean isSubtree(TreeNode root, TreeNode subRoot) {
       if(root==null) return false;
       if(subRoot==null) return true;
       if(isIdentical(root,subRoot)) return true;
       return (isSubtree(root.left,subRoot) || isSubtree(root.right,subRoot));
    }
}



lass Solution {
    private boolean isIdentical(TreeNode root,TreeNode subRoot){
        if(root==null&&subRoot==null) return true;
        if(root!=null&&subRoot!=null){
            if(root.val==subRoot.val && isIdentical(root.left,subRoot.left) && 
            isIdentical(root.right,subRoot.right))
                return true;
        }
      return false; 
    }
     public boolean isSubtree(TreeNode root, TreeNode subRoot) {
       if(root==null) return false;
       if(subRoot==null) return true;
       if(isIdentical(root,subRoot)) return true;
       return isSubtree(root.left,subRoot) || isSubtree(root.right,subRoot);
    }
}
