Given a binary tree of size N, find its reverse level order traversal. ie- the traversal must begin from the last level.

Example 1:

Input :
        1
      /   \
     3     2

Output: 3 2 1
Explanation:
Traversing level 1 : 3 2
Traversing level 0 : 1



SOLUTION:::


class Tree
{
    public ArrayList<Integer> reverseLevelOrder(Node node) 
    {
        ArrayList<Integer> ar=new ArrayList<>();
        ArrayList<Integer> ar1=new ArrayList<>();
        Queue<Node> arr=new LinkedList<>();
        arr.add(node);
        while(arr.size()>0 ){
            if(arr.peek().right!=null){
            arr.add(arr.peek().right);
            }
            if(arr.peek().left!=null){
            arr.add(arr.peek().left);
            }
            
            
            ar.add(arr.remove().data);
        }
        for(int i=ar.size()-1;i>=0;i--){
            ar1.add(ar.get(i));
        }
        
        return ar1;
    }
}      


EXPLANATION:::


       1
      /   \
     2     3
    / \   / \
   4   5 6   7


Initially, the queue arr contains only the root node 1 (arr = [1]).
Since node 1 has both left and right children, you add nodes 3 and 2 to the queue (arr = [3, 2]).
Next, you process node 3. It has a right child 7, so you add 7 to the queue (arr = [2, 7]).
Node 3 also has a left child 6, so you add 6 to the queue (arr = [2, 7, 6]).
Process node 2. It has a right child 5, so you add 5 to the queue (arr = [7, 6, 5]).
Node 2 also has a left child 4, so you add 4 to the queue (arr = [7, 6, 5, 4]).
Finally, process node 7. It has no children, so the queue remains as is (arr = [6, 5, 4]).
After processing all nodes, ar will be [1, 2, 3, 4, 5, 6, 7] (level order traversal), and ar1 will be [7, 6, 5, 4, 3, 2, 1] (reverse level order traversal).

Therefore, for the input tree, the reverse level order traversal using your method will be [7, 6, 5, 4, 3, 2, 1].
